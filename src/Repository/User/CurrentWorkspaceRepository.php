<?php

namespace App\Repository\User;


use App\Entity\User\CurrentWorkspace;
use App\Repository\AbstractFoundationRepository;
use DateTime;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Doctrine\Persistence\ManagerRegistry;

/**
 * CurrentWorkspaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CurrentWorkspaceRepository extends AbstractFoundationRepository
{
    /**
     * CurrentWorkspaceRepository constructor.
     * @param \Doctrine\Persistence\ManagerRegistry $registry
     */
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, CurrentWorkspace::class);
    }

    /**
     * Retrieve entities for pagination
     *
     * @param int $numberPerPage
     * @param int $page
     * @param string $query
     * @param $fromDate
     * @param $toDate
     * @param mixed ...$args
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     * @throws \Exception
     */
    public function retrieve(int $numberPerPage = null, int $page = null, string $query = null, \DateTime $fromDate = null, \DateTime $toDate = null, ...$args)
    {
        $actor_id = -1;
        if (isset($args[0]))
            $actor_id = (int)$args[0];
        $qb = $this->createQueryBuilder('entity')
            ->select('entity')
            ->innerJoin('entity.actor', 'actor')
            ->addSelect('actor');
        $qb->where('entity.deleted = 0');

        if (strlen(trim($query))) {
            $qb->andWhere($qb->expr()->like('entity.code', $qb->expr()->literal('%' . $query . '%')))
                ->orWhere($qb->expr()->like('entity.label', $qb->expr()->literal('%' . $query . '%')));
        }
        if ($fromDate && $fromDate instanceof DateTime) {
            $qb->andWhere('entity.dateAdd >= :fromDate');
        }
        if ($toDate && $toDate instanceof DateTime) {
            $qb->andWhere('entity.dateAdd <= :toDate');
        }
        if ($fromDate && $fromDate instanceof DateTime)
            $qb->setParameter('fromDate', new DateTime($fromDate->format('Y-m-d') . " 00:00:00"));
        if ($toDate && $toDate instanceof DateTime)
            $qb->setParameter('toDate', new DateTime($toDate->format('Y-m-d') . ' 23:59:59'));
        if ($actor_id && $actor_id != -1) {
            $qb->andWhere('actor.id = ' . (int)$actor_id);
        }
        $qb->orderBy('entity.dateAdd', 'DESC');
        $query = $qb->getQuery();
        $query->setFirstResult(($page - 1) * $numberPerPage)
            ->setMaxResults($numberPerPage);

        return new Paginator($query);
    }
}
