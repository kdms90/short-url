<?php

namespace App\Repository;

/**
 * AbstractMemberRepository contient la liste des méthode à utiliser dans les classe des utilisateurs ayant un rôle
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class AbstractMemberRepository extends AbstractFoundationRepository
{
    /**
     * Retrieve member by an actor and role
     *
     * @param int $actor_id actor identifier
     * @param int $role_id role identifier
     * @return array
     */
    public function getActorOfAccess($actor_id, $role_id)
    {
        $qb = $this->createQueryBuilder('entity')
            ->select('entity')
            ->innerJoin('entity.member', 'actor')
            ->addSelect('actor')
            ->innerJoin('entity.roles', 'roles')
            ->addSelect('roles')
            ->where('actor.id = :actor_id')
            ->andWhere('roles.id = :role_id')
            ->setParameter('actor_id', $actor_id)
            ->setParameter('role_id', $role_id);
        return $qb->getQuery()->getResult();
    }

    /**
     * Retrieve member by an actor and role
     *
     * @param $company_id
     * @param $key_rule
     * @return array
     */
    public function retriveMembersOfRoleOfCompany($company_id, $key_rule)
    {
        $qb = $this->createQueryBuilder('entity')
            ->select('entity')
            ->innerJoin('entity.member', 'actor')
            ->addSelect('actor')
            ->innerJoin('entity.roles', 'roles')
            ->addSelect('roles')
            ->innerJoin('roles.company', 'company')
            ->addSelect('company')
            ->innerJoin('roles.authorizations', 'authorizations')
            ->addSelect('authorizations')
            ->where('company.id = :company_id')
            ->andWhere('authorizations.key = :key_rule')
            ->setParameter('company_id', $company_id)
            ->setParameter('key_rule', $key_rule);
        return $qb->getQuery()->getResult();
    }
}
