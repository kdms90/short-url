<?php

namespace App\Repository;

use Doctrine\DBAL\DBALException;

/**
 * AbstractRoleAuthorizationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class AbstractRoleAuthorizationRepository extends AbstractFoundationRepository
{
    /** @var string $mainTable table principal contenant les roles */
    protected $mainTable = 'app_user_actor_role_authorization';
    /** @var string $secondaryTable table contenant les utilisateurs ayant un role */
    protected $secondaryTable = 'app_user_actor_role';

    /**
     * @param $role_id
     * @param bool $group
     * @return array
     */
    public function findRoleAndGroup($role_id, $group = true)
    {
        $em  = $this->getEntityManager();
        $sql = "SELECT `$this->mainTable`.`key_rule` as keyRule, `$this->mainTable`.`key_group` as keyGroup ";
        $sql .= " FROM `$this->mainTable` ";
        //Join
        $sql    .= " INNER JOIN  `$this->secondaryTable` ";
        $sql    .= " ON (`$this->secondaryTable`.id = `$this->mainTable`.`role_id`) AND `$this->secondaryTable`.`id` = :role_id  ";
        $result = [];
        try {
            $stmt = $em->getConnection()->prepare($sql);
            //Set parameters
            $params['role_id'] = $role_id;
            $stmt->execute($params);
            if ($group)
                foreach ($stmt->fetchAll() as $item)
                    if (!empty($item['keyGroup']))
                        $result[$item['keyGroup']][] = $item['keyRule'];
                    else
                        foreach ($stmt->fetchAll() as $itedm)
                            $result[] = $itedm['keyRule'];
        } catch (DBALException $e) {
        }

        return $result;
    }

    /**
     * @param $company_id
     * @param $role
     * @param $member_id
     * @return bool
     */
    public function isGranted($company_id, $role, $member_id)
    {
        $qb = $this->createQueryBuilder('entity')
            ->select('entity');
        $qb
            ->innerJoin('entity.role', 'role')
            ->addSelect('role')
            ->innerJoin('role.company', 'company')
            ->addSelect('company')
            ->innerJoin('role.members', 'members')
            ->addSelect('members')
            ->innerJoin('members.member', 'actor')
            ->addSelect('actor');
        $qb->where('entity.deleted = 0');
        $qb->andWhere('company.id = :company_id')
            ->setParameter('company_id', $company_id);
        $qb->andWhere('actor.id = :member_id')
            ->setParameter('member_id', $member_id);
        $qb->andWhere('entity.key = :key_rule')
            ->setParameter('key_rule', $role);
        return count($qb->getQuery()->getResult()) > 0;
    }

    /**
     * Recupère tous les droits d'accès d'un membre.
     *
     * @param $company_id
     * @param $member_id
     * @return bool
     */
    public function allAuthorizations($company_id, $member_id)
    {
        $qb = $this->createQueryBuilder('entity')
            ->select('entity');
        $qb
            ->innerJoin('entity.role', 'role')
            ->addSelect('role')
            ->innerJoin('role.company', 'company')
            ->addSelect('company')
            ->innerJoin('role.members', 'members')
            ->addSelect('members')
            ->innerJoin('members.member', 'actor')
            ->addSelect('actor');
        $qb->where('entity.deleted = 0');
        $qb->andWhere('company.id = :company_id')
            ->setParameter('company_id', $company_id);
        $qb->andWhere('actor.id = :member_id')
            ->setParameter('member_id', $member_id);
        return $qb->getQuery()->getResult();
    }
}
