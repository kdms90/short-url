<?php

namespace App\Repository;

use DateTime;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AbstractRoleRepository contient la liste des mÃ©thode Ã  utiliser dans les classes des roles
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class AbstractRoleRepository extends AbstractFoundationRepository
{
    /**
     * Retrieve entities for pagination
     *
     * @param int $numberPerPage
     * @param int $page
     * @param string $query
     * @param $fromDate
     * @param $toDate
     * @param mixed ...$args
     * @return \Doctrine\ORM\Tools\Pagination\Paginator
     * @throws \Exception
     */
    public function retrieve(int $numberPerPage = null, int $page = null, string $query = null, \DateTime $fromDate = null, \DateTime $toDate = null, ...$args)
    {
        $qb = $this->createQueryBuilder('entity')
            ->select('entity')
            ->innerJoin('entity.company', 'company')
            ->addSelect('company');
        $qb->where('entity.deleted = 0');

        if (strlen(trim($query))) {
            $qb->andWhere($qb->expr()->like('entity.code', $qb->expr()->literal('%' . $query . '%')))
                ->orWhere($qb->expr()->like('entity.name', $qb->expr()->literal('%' . $query . '%')))
                ->orWhere($qb->expr()->like('entity.description', $qb->expr()->literal('%' . $query . '%')));
        }
        if ($fromDate && $fromDate instanceof DateTime) {
            $qb->andWhere('entity.dateAdd >= :fromDate');
        }
        if ($toDate && $toDate instanceof DateTime) {
            $qb->andWhere('entity.dateAdd <= :toDate');
        }
        if ($fromDate && $fromDate instanceof DateTime)
            $qb->setParameter('fromDate', new DateTime($fromDate->format('Y-m-d') . " 00:00:00"));
        if ($toDate && $toDate instanceof DateTime)
            $qb->setParameter('toDate', new DateTime($toDate->format('Y-m-d') . ' 23:59:59'));
        $qb->orderBy('entity.dateAdd', 'DESC');
        $query = $qb->getQuery();
        $query->setFirstResult(($page - 1) * $numberPerPage)
            ->setMaxResults($numberPerPage);

        return new Paginator($query);
    }

    /**
     * Retrieve roles of an actor in companry
     *
     * @param int $actor_id actor identifier
     * @param int $role_id role identifier
     * @return array
     */
    public function checkIActorAccessExists($actor_id, $role_id)
    {
        $qb = $this->createQueryBuilder('entity')
            ->select('entity')
            ->innerJoin('entity.members', 'members')
            ->addSelect('members')
            ->innerJoin('members.member', 'actor')
            ->addSelect('actor')
            ->where('actor.id = :actor_id')
            ->andWhere('entity.id = :role_id')
            ->setParameter('actor_id', $actor_id)
            ->setParameter('role_id', $role_id);
        try {
            return $qb->getQuery()->getOneOrNullResult();
        } catch (NonUniqueResultException $e) {
            $results = $qb->getQuery()->getResult();
            if (!empty($results[0]))
                return $results[0];
            return null;
        }
    }

    /**
     * @param $actor_id
     * @param $company_id
     * @return array
     */
    public function getUserAccessOfCompany($actor_id, $company_id)
    {
        $qb = $this->queryRolesOfCompany($company_id)
            ->innerJoin('a.members', 'members')
            ->addSelect('members')
            ->innerJoin('members.member', 'actor')
            ->addSelect('actor')
            ->andWhere('actor.id = :actor_id')
            ->setParameter('actor_id', $actor_id);
        return $qb->getQuery()->getResult();
    }

    /**
     * @param $company_id
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function queryRolesOfCompany($company_id)
    {
        return $this->createQueryBuilder('a')
            ->select('a')
            ->innerJoin('a.company', 'company')
            ->addSelect('company')
            ->where('company.id = :company_id')
            ->setParameter('company_id', $company_id);
    }
}
